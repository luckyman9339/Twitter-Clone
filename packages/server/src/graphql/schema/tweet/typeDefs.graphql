type Tweet {
  id: ID!
  content: String!
  user: User
  createdAt: String!
  likes: [User!]!
  likesCount: Int

  # If the authenticated user retweeted the tweet
  retweeted: Boolean!
  # If the authenticated user liked the tweet
  liked: Boolean!
}

type Retweet {
  id: ID!
  tweet: Tweet
  user: User
}

type Like {
  id: ID!
  tweet: Tweet
  user: User
}

type Query {
  allTweets: [Tweet!]!
}

type Mutation {
  # TODO: change the return to include a payload instead of the value directly
  createTweet(input: CreateTweetInput!): Tweet
  retweet(input: RetweetInput!): RetweetPayload!
  like(input: LikeInput!): LikePayload!
}

input CreateTweetInput {
  content: String!
}

input RetweetInput {
  tweetId: ID!
}

type RetweetPayload {
  retweet: Retweet!
}

input LikeInput {
  tweetId: ID!
}

type LikePayload {
  like: Like!
}
